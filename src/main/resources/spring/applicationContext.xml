<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"  
xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
    xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">  
    
    <!-- 将配置文件读取到容器中，交给Spring管理 -->  
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
        <property name="locations">  
           <list>  
              <value>classpath:jdbc.properties</value>            
           </list>  
        </property>  
    </bean>
    
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">   
        <property name="driverClassName" value="${jdbc.driver}" />
        <!-- 基本属性 url、user、password   -->
        <property name="url" value="${jdbc.url}" />  
        <property name="username" value="${jdbc.username}" />  
        <property name="password" value="${jdbc.password}" />  
            
        <!--  配置初始化大小、最小、最大   -->
        <property name="initialSize" value="1" />  
        <property name="minIdle" value="1" />   
        <property name="maxActive" value="20" />  
       
        <!-- 配置获取连接等待超时的时间   -->
        <property name="maxWait" value="60000" />  
       
        <!--  配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒   -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />  
       
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒   -->
        <property name="minEvictableIdleTimeMillis" value="300000" />  
        
        <property name="validationQuery" value="SELECT 'x'" />  
        <property name="testWhileIdle" value="true" />  
        <property name="testOnBorrow" value="false" />  
        <property name="testOnReturn" value="false" />  
       
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小   -->
        <property name="poolPreparedStatements" value="true" />  
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />  
       
        <!--  配置监控统计拦截的filters，去掉后监控界面sql无法统计   -->
        <property name="filters" value="stat" />   
    </bean>  
    
    <aop:aspectj-autoproxy  proxy-target-class="true"/> 
        <!-- 定义事务管理器 -->
    <bean id="transactionManager"
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
    <!-- 定义事务策略 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!--查询方法都是只读的 -->
            <tx:method name="query*" propagation="SUPPORTS" isolation="READ_COMMITTED" read-only="true" />
            <tx:method name="select*" propagation="SUPPORTS" isolation="READ_COMMITTED" read-only="true" />
            <tx:method name="get*" propagation="SUPPORTS" isolation="READ_COMMITTED" read-only="true" />

            <!-- 写操作，事务传播行为定义为REQUIRED，抛出RuntimeException时回滚 -->
            <tx:method name="insert*" propagation="REQUIRED" isolation="READ_COMMITTED" rollback-for="java.lang.RuntimeException" />
            <tx:method name="update*" propagation="REQUIRED" isolation="READ_COMMITTED" rollback-for="java.lang.RuntimeException"/>
            <tx:method name="delete*" propagation="REQUIRED" isolation="READ_COMMITTED" rollback-for="java.lang.RuntimeException"/>

            <!--其他方法使用默认事务策略 -->
            <tx:method name="*" propagation="SUPPORTS" isolation="READ_COMMITTED"/>
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <!-- 定义切面，所有的service的所有方法 -->
        <aop:pointcut id="txPointcut" expression="execution(* com.simple.service.*.*(..))" />
        <!-- 应用事务策略到Service切面 -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
    </aop:config>
</beans>